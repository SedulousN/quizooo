{"ast":null,"code":"var _jsxFileName = \"C:\\\\JKLU\\\\Semester 5\\\\Full Stack\\\\quizooo\\\\frontend\\\\src\\\\components\\\\Contest\\\\ContestDetails.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom'; // Hook to fetch params from URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContestDetails = () => {\n  _s();\n  const {\n    contestId\n  } = useParams(); // Extract contestId from URL\n  // This would ideally come from an API, but we can mock it here for now.\n  const contests = [{\n    id: 1,\n    name: \"Weekly Contest 1\",\n    type: \"Weekly\",\n    date: \"2024-11-20\",\n    description: \"A fun coding contest to test your skills.\"\n  }, {\n    id: 2,\n    name: \"Bi-Daily Contest 1\",\n    type: \"Bi-Daily\",\n    date: \"2024-11-15\",\n    description: \"A quick bi-daily contest to stay sharp.\"\n  }, {\n    id: 3,\n    name: \"Special Quiz\",\n    type: \"Quiz\",\n    date: \"2024-11-25\",\n    description: \"A special quiz with unique challenges.\"\n  }];\n\n  // Find the contest based on the contestId from the URL\n  const contest = contests.find(contest => contest.id === parseInt(contestId));\n  if (!contest) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Contest not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contest-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: contest.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 10\n      }, this), \" \", contest.type]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 10\n      }, this), \" \", new Date(contest.date).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 10\n      }, this), \" \", contest.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.history.back(),\n      children: \"Back to Contests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(ContestDetails, \"6yFR1iE/EANJL7PWh8XP78NUg5k=\", false, function () {\n  return [useParams];\n});\n_c = ContestDetails;\nexport default ContestDetails;\nvar _c;\n$RefreshReg$(_c, \"ContestDetails\");","map":{"version":3,"names":["React","useParams","jsxDEV","_jsxDEV","ContestDetails","_s","contestId","contests","id","name","type","date","description","contest","find","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Date","toLocaleDateString","onClick","window","history","back","_c","$RefreshReg$"],"sources":["C:/JKLU/Semester 5/Full Stack/quizooo/frontend/src/components/Contest/ContestDetails.js"],"sourcesContent":["import React from 'react';\r\nimport { useParams } from 'react-router-dom'; // Hook to fetch params from URL\r\n\r\nconst ContestDetails = () => {\r\n  const { contestId } = useParams(); // Extract contestId from URL\r\n  // This would ideally come from an API, but we can mock it here for now.\r\n  const contests = [\r\n    { id: 1, name: \"Weekly Contest 1\", type: \"Weekly\", date: \"2024-11-20\", description: \"A fun coding contest to test your skills.\" },\r\n    { id: 2, name: \"Bi-Daily Contest 1\", type: \"Bi-Daily\", date: \"2024-11-15\", description: \"A quick bi-daily contest to stay sharp.\" },\r\n    { id: 3, name: \"Special Quiz\", type: \"Quiz\", date: \"2024-11-25\", description: \"A special quiz with unique challenges.\" },\r\n  ];\r\n\r\n  // Find the contest based on the contestId from the URL\r\n  const contest = contests.find(contest => contest.id === parseInt(contestId));\r\n\r\n  if (!contest) {\r\n    return <div>Contest not found!</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"contest-details-container\">\r\n      <h2>{contest.name}</h2>\r\n      <p><strong>Type:</strong> {contest.type}</p>\r\n      <p><strong>Date:</strong> {new Date(contest.date).toLocaleDateString()}</p>\r\n      <p><strong>Description:</strong> {contest.description}</p>\r\n      <button onClick={() => window.history.back()}>Back to Contests</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}